package com.icinbank.serviceimpl;

import org.springframework.beans.factory.annotation.Autowired;

import com.icinbank.model.SavingAccount;
import com.icinbank.repository.PersonalTransactionRepo;
import com.icinbank.repository.SavingAccountRepo;
import com.icinbank.service.UserService;

public class SavingAccountServiceImpl {
	  @Autowired
	    private SavingAccountRepo savingAccount;
	    
	    @Autowired
	    private UserService userService;
		private static int nextAccountNumber = 11223344;
		
		
		@Autowired
		private PersonalTransactionRepo personalTransaction;
		
		@Override
		public SavingAccount createSavingsAccount() {
		        SavingAccount savingsAccount = new SavingAccount();
		        savingsAccount.setAccountBalance(new Long(0));
		        nextAccountNumber += 1;
		        savingsAccount.setAccountNumber(nextAccountNumber);
		        System.out.println(savingsAccount);
		        savingAccount.save(savingsAccount);

		        return savingsAccount.findByAccountNumber(savingsAccount.getAccountNumber());
		    }
		@Override 
		public void deposit( Integer accNo, Long amount) {
					SavingsAccount savingsAccount = savingsAccountDao.findByAccountNumber(accNo);
					Long prevBal = savingsAccount.getAccountBalance();
					Long newBal = savingsAccount.getAccountBalance() + amount;
			        savingsAccount.setAccountBalance((long) (savingsAccount.getAccountBalance() + amount) );
			        savingsAccountDao.save(savingsAccount);
			        Date date = new Date();
			        PersonalTransaction personalTransaction = new PersonalTransaction(accNo , date, prevBal, newBal, "Deposit" ,"Savings");
			        personalTransactionDao.save(personalTransaction);
		        }
		    
		    
		    public String withdraw(Integer accNo, Long amount) {
		    	    SavingsAccount savingsAccount = savingsAccountDao.findByAccountNumber(accNo);
		    	    if(savingsAccount.getAccountBalance()>=amount) {
		    	    	Long prevBal = savingsAccount.getAccountBalance();
		    	    	Long newBal = savingsAccount.getAccountBalance() - amount;
		    	    	savingsAccount.setAccountBalance(newBal);
			            savingsAccountDao.save(savingsAccount);
			            Date date = new Date();
				        PersonalTransaction personalTransaction = new PersonalTransaction(accNo ,date, prevBal, newBal, "Withdraw" ,"Savings");
				        personalTransactionDao.save(personalTransaction);
				        return "Done";
		    	    }
		    	    else {
		    	    	return "Insufficient balance";
		    	    }
		            
		    }
		    
		   
			@Override
			public List<SavingsAccount> getAllSavingsAccounts() {
				// TODO Auto-generated method stub
				return null;
			}

			@Override
			public SavingsAccount getAccount(int accNo) {
				return savingsAccountDao.findByAccountNumber(accNo);
			}
			
			
			 @Override
			    public Long retrieveAccountBalance(long accountId) {
			        Optional<SavingsAccount> account = savingsAccountDao.findById(accountId);
			        if (!account.isPresent()) {
			            throw new AccountNotFoundException(
			                  String.format("Account %s not found.", accountId));
			        }
			        return account.get().getAccountBalance();
			    }
}
